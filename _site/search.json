[
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "#Load libraries\n\nlibrary(tidyverse)\n\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(lubridate)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(ggrepel)\nlibrary(scales)\n\n#> \n#> Attaching package: 'scales'\n#> \n#> The following object is masked from 'package:purrr':\n#> \n#>     discard\n#> \n#> The following object is masked from 'package:readr':\n#> \n#>     col_factor\n\nlibrary(maps)\n\n#> \n#> Attaching package: 'maps'\n#> \n#> The following object is masked from 'package:purrr':\n#> \n#>     map\n\n\n#Mapping the time course of cumulative Covid-19 cases!\n\ncovid_data_tbl <- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n\n#> Rows: 313070 Columns: 67\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr   (4): iso_code, continent, location, tests_units\n#> dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#> date  (1): date\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n1 Filtering data\n\nselected_countries <- c(\"Spain\", \"United States\", \"United Kingdom\", \"France\", \"Germany\")\n\nfiltered_data <- covid_data_tbl %>%\n  filter(location %in% selected_countries) %>%\n  mutate(date = as.Date(date))\n\n\ncumulative_cases <- filtered_data %>%\n  group_by(location) %>%\n  mutate(cumulative_cases_millions = total_cases / 1e6)\n\n\n\n2 Plotting cumulative cases over time\n\nggplot(cumulative_cases, aes(x = date, y = cumulative_cases_millions, color = location)) +\n  geom_line(size = 1) +\n  scale_x_date(date_labels = \"%b %Y\", date_breaks = \"1 month\") +\n  scale_y_continuous(labels = scales::comma) +\n  labs(title = \"COVID-19 cases worldwide\",\n       x = \"Month and Year\",\n       y = \"Cumulative Cases (Millions)\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5),\n        legend.position = \"bottom\",\n        axis.text.x = element_text(angle = 45, hjust = 1)) +\n  geom_label_repel(data = filter(cumulative_cases, date == max(date)),\n                   aes(label = paste(location, scales::comma(cumulative_cases_millions), sep = \" - \")),\n                   nudge_x = 10,\n                   direction = \"y\",\n                   color = \"black\",\n                   size = 3,\n                   box.padding = 0.5,\n                   box.margin = 0.5,\n                   segment.color = \"black\")\n\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `linewidth` instead.\n\n\n#> Warning in geom_label_repel(data = filter(cumulative_cases, date == max(date)),\n#> : Ignoring unknown parameters: `box.margin`\n\n\n#> Warning: Removed 76 rows containing missing values (`geom_line()`).\n\n\n\n\n\n\n\n\n\n\n\n3 Visualizing the distribution of the mortality rate (deaths / population)\n\n\n4 Read the data and adjust country names\n\nworld <- map_data(\"world\")\ncovid_data_tbl <- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n\n#> Rows: 313070 Columns: 67\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr   (4): iso_code, continent, location, tests_units\n#> dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#> date  (1): date\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nadjusted_data <- covid_data_tbl %>% \n  mutate(location = case_when(\n    location == \"United Kingdom\" ~ \"UK\",\n    location == \"United States\" ~ \"USA\",\n    location == \"Democratic Republic of Congo\" ~ \"Democratic Republic of the Congo\",\n    TRUE ~ location\n  )) %>%\n  distinct()\n\n#Adjusted data by location and latest entry for each location\n\nadjusted_data_latest <- adjusted_data %>%\n  group_by(location) %>%\n  slice_max(date, n = 1) %>%\n  ungroup()\n\n\n\n5 Joining the latitude/longitude data with the COVID-19 data\n\nplot_data <- left_join(world, adjusted_data_latest, by = c(\"region\" = \"location\"))\n\n\n\n6 Visualization of the distribution of the mortality rate or case-fatality rate\n\nggplot() +\n  geom_polygon(data = plot_data, aes(x = long, y = lat, group = group, fill = total_deaths / population), color = \"black\") +\n  scale_fill_gradient(low = \"red\", high = \"black\", na.value = \"gray\", guide = \"legend\") +\n  labs(fill = \"Mortality Rate\") +\n  ggtitle(\"Distribution of Mortality Rate\") +\n  theme_void()"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "Add a language to syntax highlight code blocks: #loading the libraries\n\nlibrary(tidyverse)\n\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(tibble)\nlibrary(readr)\nlibrary(dplyr)\nlibrary(magrittr)\n\n#> \n#> Attaching package: 'magrittr'\n#> \n#> The following object is masked from 'package:purrr':\n#> \n#>     set_names\n#> \n#> The following object is masked from 'package:tidyr':\n#> \n#>     extract\n\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(readxl)\nlibrary(lubridate)\n\n#read data\n\nbikes_tbl  <-  read_excel(path = \"C:/Users/navan/OneDrive/Desktop/BM/ss23-bdsb-NavaneetS/assets/dsassets/bikes.xlsx\")\norderlines_tbl   <-  read_excel(path = \"C:/Users/navan/OneDrive/Desktop/BM/ss23-bdsb-NavaneetS/assets/dsassets/orderlines.xlsx\")\n\n#> New names:\n#> • `` -> `...1`\n\nbikeshops_tbl   <-   read_excel(path = \"C:/Users/navan/OneDrive/Desktop/BM/ss23-bdsb-NavaneetS/assets/dsassets/bikeshops.xlsx\")\n\n#join tables\n\nleft_join(orderlines_tbl, bikes_tbl, by = c(\"product.id\" = \"bike.id\"))\n\n\n\n  \n\n\nbike_orderlines_joined_tbl   <-   orderlines_tbl   %>%\n  left_join(bikes_tbl, by = c(\"product.id\" = \"bike.id\"))  %>%\n  left_join(bikeshops_tbl, by = c(\"customer.id\" = \"bikeshop.id\"))\n\n#city name from location\n\nbike_orderlines_wrangled_tbl <- bike_orderlines_joined_tbl %>% \n separate(col = location,\n           into = c(\"city\",\"state\"),\n           sep = \", \",\n           convert = T) %>%\n  separate(col    = category,\n           into   = c(\"category.1\", \"category.2\", \"category.3\"),\n           sep    = \" - \") %>%\n  \n  \n  mutate(total_price = price * quantity)\n\n#Highest revenue state with the plot (North Rhine-Westphalia)\n\nsales_by_location_tbl  <-  bike_orderlines_wrangled_tbl %>%\n  select(state, total_price) %>%\n  group_by(state) %>%\n  summarize(sales = sum(total_price)) %>%\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\",\n                                     decimal.mark = \",\",\n                                     prefix = \"\",\n                                     suffix = \"€\"))\n\n\nglimpse(sales_by_location_tbl)\n\n#> Rows: 12\n#> Columns: 3\n#> $ state      <chr> \"Baden-Württemberg\", \"Bavaria\", \"Berlin\", \"Bremen\", \"Hambur…\n#> $ sales      <dbl> 6521090, 6742819, 1128433, 10653499, 3874756, 1558901, 4107…\n#> $ sales_text <chr> \"6.521.090€\", \"6.742.819€\", \"1.128.433€\", \"10.653.499€\", \"3…\n\nsales_by_location_tbl %>%\n  ggplot(aes(x = state, y = sales)) +\n  \n  geom_col(fill = \"#2DC6D6\") +\n  geom_label(aes(label = sales_text)) +\n  #geom_smooth(method = \"lm\", se = FALSE)+\n  scale_y_continuous( labels = scales::dollar_format(big.mark = \".\",\n                                                     decimal.mark = \",\",\n                                                     prefix = \"\",\n                                                     suffix = \" €\")) +\n  \n  labs(\n    title = \"Revenue by Location(State)\",\n    subtitle = \"Trend\",\n    x = \"\",\n    y = \"Revenue\"\n  ) + theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n#Analyze the sales by location and year (facet_wrap).\n\nsales_by_location_cat_1_tbl <- bike_orderlines_wrangled_tbl %>%\n  select(state, total_price, category.1) %>%\n  group_by(state, category.1) %>%\n  summarise(sales = sum(total_price)) %>%\n  ungroup() %>%\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n#> `summarise()` has grouped output by 'state'. You can override using the\n#> `.groups` argument.\n\n#sales_by_location_cat_1_tbl\nsales_by_location_cat_1_tbl %>%\n  ggplot(aes(x = category.1, y = sales, fill = state)) +\n  geom_col() +\n  facet_wrap(~ state) +\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title = \"Revenue by category and state\",\n    subtitle = \"Trend in sales of products in each state\",\n    fill = \"State List\"\n  )+ theme(axis.text.x = element_text(angle = 45, hjust = 1))"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#header-2",
    "href": "content/01_journal/01_tidyverse.html#header-2",
    "title": "Tidyverse",
    "section": "2.1 Header 2",
    "text": "2.1 Header 2\n\nHeader 3\n\nHeader 4\n\nHeader 5\n\nHeader 6"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh.\n\n\n#Loading the Libraries\n\nlibrary(RSQLite)\nlibrary(dplyr)\nlibrary(httr)\nlibrary(glue)\nlibrary(jsonlite)\nlibrary(keyring)\nlibrary(\"rstudioapi\")\nlibrary(rvest)\n\n#Send GET request to the API\n\n resp <- GET(\"https://api.openweathermap.org/data/2.5/weather?q=London&appid=a8c19e73b21191e9fa018bef278a9af4\")   #Reading content from the website\nweather_data <- fromJSON(content(resp, \"text\")) %>%  \n  as.data.frame()\nweather_data\n\n\n\n  \n\n\n\n#Scrape one of the competitor websites of canyon and create a small database.\n\n# Set the URL of the website to scrape\nurl <- \"https://www.rosebikes.de/\"\n\n# Scrape the website\nhtml <- read_html(url)\n\n# Find the elements that contain the model names\nmodel_names <- html %>%\n  html_nodes(\".products-slider-tile__product-name\") %>%\n  html_text()\n\n# Find the elements that contain the prices\nprices <- html %>%\n  html_nodes(\".product-tile-price__current-value\") %>%\n  html_text()\n\n# Extract the number using regular expressions\nprice <- gsub(\"[^0-9.,]\", \"\", prices)  # Remove all non-digit, non-decimal, and non-comma characters\n\n# Create a data frame of the model names and prices\ndatabase <- data.frame(\n  Model = model_names,\n  Price = price\n)\n\n# Print the data frame\nprint(database)\n\n#>                                                    Model    Price\n#> 1                                       XLITE 04 Ultegra 3.299,00\n#> 2                                       XLITE 06 Ultegra 3.999,00\n#> 3                                BACKROAD GRX RX810 1x11 2.999,00\n#> 4                                           COUNT SOLO 2   849,00\n#> 5                                            THE BRUCE 2 1.199,00\n#> 6                                  BACKROAD AL GRX RX400 1.999,00\n#> 7                                             SNEAK PLUS 2.399,00\n#> 8                                          ROOT MILLER 1 2.299,00\n#> 9                                        PRO SL DISC 105 1.699,00\n#> 10             BACKROAD Force eTap AXS XPLR 1x12 Limited 4.899,00\n#> 11                                         THRILL HILL 3 3.999,00\n#> 12                            BACKROAD AL GRX RX600 1X11 2.349,00\n#> 13                                   MAYOR PLUS 3 Unisex 4.999,00\n#> 14                             BACKROAD AXS MULLET BUILD 3.999,00\n#> 15                Kettenverschleißlehre mit Kettenhalter     5,45\n#> 16                                   P-BOUNCE Bikeshorts    79,95\n#> 17                              Industrielager 61902-2RS    14,95\n#> 18                            ITAMOS 2 Fahrradhandschuhe    20,95\n#> 19                  SV 42 & 60 28\" Wide Rennrad Schlauch     2,95\n#> 20                          FH-S Halter für Apple AirTag     5,95\n#> 21                          SCORPIONE 3 JERSEY Radtrikot    69,95\n#> 22                        Strada E-Bike XL Fahrradträger   439,95\n#> 23                                 VALDES MTB Bikeshorts    84,95\n#> 24                 Multi Cage CF-1 Flaschenhalter Carbon    11,95\n#> 25                   NECK BRACE DBX 3.5 Nackenprotektor    221,95\n#> 26                                  Fly Tex Trinkflasche     5,95\n#> 27              AIRFLEX CHEST PROTECTOR Protektorenweste   145,95\n#> 28 Grand Prix 5000 Rennradreifen, Faltreifen (Tube-Type)    34,95\n#> 29       Shock Blow - Dämpferpumpe und Federgabelpumpe -    19,95"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  }
]